openapi: 3.0.1
info:
  title: Anecdotario Commons Service API
  version: 1.0.0
  description: |
    Commons service providing shared functionality across the Anecdotario platform.
    
    This service provides:
    - User and organization search with pagination
    - Nickname validation and uniqueness checking
    - Photo upload, processing, and management
    - Shared utilities and contracts for other services
    
    **Architecture:**
    - Internal Lambda-to-Lambda communication for most functions
    - REST API for search functionality (public-facing)
    - DynamoDB unified storage for users and organizations
    - S3 multi-version photo processing and storage
    
    **Search Features:**
    - Case-insensitive search across nicknames and full names
    - Relevance-based result ordering
    - Token-based pagination for large result sets
    - Cross-entity search (users, organizations, campaigns)
    
    **Layer Exports:**
    - **Commons Service Layer**: Shared contracts, models, and utilities
    - **Layer ARN**: Exported via CloudFormation for other services
    - **Usage**: Import layer in other service Lambda functions
  contact:
    name: Anecdotario Development Team
  license:
    name: MIT

servers:
  - url: https://1hheux7spg.execute-api.us-east-1.amazonaws.com/prod
    description: Production API
  - url: https://1hheux7spg.execute-api.us-east-1.amazonaws.com/staging
    description: Staging API  
  - url: https://1hheux7spg.execute-api.us-east-1.amazonaws.com/dev
    description: Development API

paths:
  /search:
    get:
      tags:
        - Search
      summary: Search users and organizations
      description: |
        Search for users and organizations by nickname or full name with pagination support.
        
        **Search Behavior:**
        - Searches both `nickname` and `full_name` fields
        - Case-insensitive matching (contains search, not exact match)
        - Results ordered by relevance (nickname matches prioritized)
        - Only returns active entities (status = 'active')
        
        **Pagination:**
        - Token-based stateless pagination
        - Use `next_page_token` from response to get subsequent pages
        - Tokens are Base64-encoded JSON and URL-safe
        
        **Performance Notes:**
        - Uses DynamoDB scan operation (expensive for large datasets)
        - Recommended limit: 20 results per page (max 50)
        - Typical response time: 1-3 seconds per page
        
        **Examples:**
        - `?q=john&limit=10` - Find first 10 users/orgs containing "john"
        - `?q=tech&limit=5&page_token=eyJuaWNr...` - Get page 2 of "tech" search
      parameters:
        - name: q
          in: query
          required: true
          description: |
            Search query to match against nickname or full name.
            Minimum 2 characters required.
          schema:
            type: string
            minLength: 2
            maxLength: 100
          example: "john"
        - name: limit
          in: query
          required: false
          description: |
            Maximum number of results per page.
            Defaults to 20, maximum allowed is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          example: 10
        - name: page_token
          in: query
          required: false
          description: |
            Pagination token from previous response.
            Use `next_page_token` value from previous search result.
          schema:
            type: string
            pattern: '^[A-Za-z0-9+/]+=*$'
          example: "eyJuaWNrbmFtZSI6ImpvaG5fZG9lIn0="
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - query
                  - limit
                  - total_found
                  - has_more
                  - results
                  - pagination
                  - search_metadata
                properties:
                  success:
                    type: boolean
                    description: Always true for successful responses
                    example: true
                  query:
                    type: string
                    description: The search query that was executed
                    example: "john"
                  limit:
                    type: integer
                    description: Requested results limit for this page
                    example: 10
                  total_found:
                    type: integer
                    description: Number of results returned in this page
                    example: 5
                  has_more:
                    type: boolean
                    description: True if more results are available
                    example: true
                  next_page_token:
                    type: string
                    nullable: true
                    description: |
                      Token for retrieving the next page of results.
                      Null if no more pages available.
                    example: "eyJuaWNrbmFtZSI6ImpvaG5fZG9lIn0="
                  results:
                    type: array
                    description: Array of matching users and organizations
                    items:
                      $ref: '#/components/schemas/SearchResult'
                  pagination:
                    type: object
                    description: Pagination metadata
                    required:
                      - current_page_size
                      - requested_limit
                      - has_more_pages
                      - items_scanned
                    properties:
                      current_page_size:
                        type: integer
                        description: Actual number of results in this response
                        example: 5
                      requested_limit:
                        type: integer
                        description: Limit that was requested
                        example: 10
                      has_more_pages:
                        type: boolean
                        description: Same as root-level has_more
                        example: true
                      items_scanned:
                        type: integer
                        description: Number of database items examined
                        example: 20
                  search_metadata:
                    type: object
                    description: Information about the search operation
                    required:
                      - search_type
                      - fields_searched
                      - entity_types
                      - status_filter
                      - sorting
                    properties:
                      search_type:
                        type: string
                        enum: [contains_match]
                        description: Type of search performed
                        example: "contains_match"
                      fields_searched:
                        type: array
                        items:
                          type: string
                        description: Fields that were searched
                        example: ["nickname", "full_name"]
                      entity_types:
                        type: array
                        items:
                          type: string
                        description: Types of entities included in search
                        example: ["user", "organization"]
                      status_filter:
                        type: string
                        description: Status filter applied
                        example: "active_only"
                      sorting:
                        type: string
                        description: Sort strategy used
                        example: "relevance_based"
              examples:
                successful_search:
                  summary: Successful search with results
                  value:
                    success: true
                    query: "john"
                    limit: 10
                    total_found: 3
                    has_more: false
                    next_page_token: null
                    results:
                      - nickname: "john_doe"
                        full_name: "John Doe"
                        user_type: "user"
                        is_certified: false
                        avatar_thumbnail_url: "https://anecdotario-photos.s3.amazonaws.com/users/john_doe/profile/thumbnail_20241201_abc123.jpg"
                        posts_count: 15
                        followers_count: 42
                        following_count: 38
                        status: "active"
                        created_at: "2024-01-15T10:30:00Z"
                        match_type: "both"
                        match_position: 0
                      - nickname: "johnny_test"
                        full_name: "Johnny Test"
                        user_type: "user"
                        is_certified: true
                        avatar_thumbnail_url: "https://anecdotario-photos.s3.amazonaws.com/users/johnny_test/profile/thumbnail_20241201_def456.jpg"
                        posts_count: 8
                        followers_count: 156
                        following_count: 89
                        status: "active"
                        created_at: "2024-02-20T14:45:00Z"
                        match_type: "both"
                        match_position: 0
                      - nickname: "smith_john"
                        full_name: "Smith Johnson"
                        user_type: "user"
                        is_certified: false
                        avatar_thumbnail_url: null
                        posts_count: 3
                        followers_count: 12
                        following_count: 25
                        status: "active"
                        created_at: "2024-03-10T09:15:00Z"
                        match_type: "nickname"
                        match_position: 6
                    pagination:
                      current_page_size: 3
                      requested_limit: 10
                      has_more_pages: false
                      items_scanned: 6
                    search_metadata:
                      search_type: "contains_match"
                      fields_searched: ["nickname", "full_name"]
                      entity_types: ["user", "organization"]
                      status_filter: "active_only"
                      sorting: "relevance_based"
                paginated_search:
                  summary: Search with pagination
                  value:
                    success: true
                    query: "tech"
                    limit: 5
                    total_found: 5
                    has_more: true
                    next_page_token: "eyJuaWNrbmFtZSI6InRlY2hfc3RhcnR1cCJ9"
                    results:
                      - nickname: "tech_corp"
                        full_name: "Tech Corporation"
                        user_type: "organization"
                        is_certified: true
                        avatar_thumbnail_url: "https://anecdotario-photos.s3.amazonaws.com/orgs/tech_corp/logo/thumbnail_20241201_ghi789.jpg"
                        posts_count: 25
                        followers_count: 1250
                        following_count: 450
                        status: "active"
                        created_at: "2023-06-01T12:00:00Z"
                        match_type: "both"
                        match_position: 0
                    pagination:
                      current_page_size: 5
                      requested_limit: 5
                      has_more_pages: true
                      items_scanned: 10
                    search_metadata:
                      search_type: "contains_match"
                      fields_searched: ["nickname", "full_name"]
                      entity_types: ["user", "organization"]
                      status_filter: "active_only"
                      sorting: "relevance_based"
        '400':
          description: Bad Request - Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_query:
                  summary: Missing query parameter
                  value:
                    success: false
                    error: 'Query parameter "q" is required'
                    details:
                      usage: 'GET /search?q=john&limit=10&page_token=eyJuaWNrbmFtZSI6ImpvaG4ifQ'
                      requirements: 'Query must be at least 2 characters'
                query_too_short:
                  summary: Query too short
                  value:
                    success: false
                    error: 'Query must be at least 2 characters long'
                    details:
                      provided_query: 'j'
                      min_length: 2
                invalid_page_token:
                  summary: Invalid pagination token
                  value:
                    success: false
                    error: 'Invalid page_token parameter'
                    details:
                      error: 'Page token must be a valid base64-encoded JSON'
                      details: 'Invalid character in token'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                search_failure:
                  summary: Search operation failed
                  value:
                    success: false
                    error: 'Search operation failed'
                    details:
                      error_details: 'Database connection timeout'
                      query: 'john'
                      limit: 10

components:
  schemas:
    SearchResult:
      type: object
      description: A user or organization matching the search query
      required:
        - nickname
        - full_name
        - user_type
        - status
        - created_at
        - match_type
        - match_position
      properties:
        nickname:
          type: string
          description: Unique nickname (primary identifier)
          example: "john_doe"
        full_name:
          type: string
          description: Full display name
          example: "John Doe"
        user_type:
          type: string
          enum: [user, organization]
          description: Type of entity
          example: "user"
        is_certified:
          type: boolean
          description: Whether the entity is verified/certified
          example: false
        avatar_thumbnail_url:
          type: string
          nullable: true
          format: uri
          description: |
            Public URL for thumbnail avatar image (150x150px).
            Null if no avatar is set.
          example: "https://anecdotario-photos.s3.amazonaws.com/users/john_doe/profile/thumbnail_20241201_abc123.jpg"
        posts_count:
          type: integer
          minimum: 0
          description: Number of posts/stories published
          example: 15
        followers_count:
          type: integer
          minimum: 0
          description: Number of followers
          example: 42
        following_count:
          type: integer
          minimum: 0
          description: Number of entities being followed
          example: 38
        status:
          type: string
          enum: [active, inactive, suspended]
          description: Current entity status (only active returned in search)
          example: "active"
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last profile update timestamp
          example: "2024-11-28T15:45:00Z"
        match_type:
          type: string
          enum: [nickname, full_name, both]
          description: |
            Where the search query was found:
            - nickname: Found in nickname only
            - full_name: Found in full name only  
            - both: Found in both fields
          example: "both"
        match_position:
          type: integer
          minimum: 0
          description: |
            Character position where the match starts.
            Used for relevance sorting (lower = more relevant).
          example: 0
    
    ErrorResponse:
      type: object
      description: Standard error response format
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          description: Always false for error responses
          example: false
        error:
          type: string
          description: Human-readable error message
          example: 'Query parameter "q" is required'
        details:
          type: object
          description: Additional error context and debugging information
          additionalProperties: true
          example:
            usage: 'GET /search?q=john&limit=10'
            requirements: 'Query must be at least 2 characters'

tags:
  - name: Search
    description: |
      User and organization search functionality with pagination.
      
      **Key Features:**
      - Cross-entity search (users and organizations)
      - Case-insensitive partial matching
      - Relevance-based result ordering  
      - Token-based pagination for large result sets
      - Active entities only (status filtering)
      
      **Use Cases:**
      - User directory/discovery
      - Organization lookup
      - Autocomplete/typeahead functionality
      - Administrative user management