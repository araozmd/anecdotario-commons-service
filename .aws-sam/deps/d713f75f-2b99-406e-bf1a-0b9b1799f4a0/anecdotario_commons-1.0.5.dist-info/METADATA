Metadata-Version: 2.4
Name: anecdotario-commons
Version: 1.0.5
Summary: Shared utilities, models, and services for Anecdotario microservices
Author: Anecdotario Team
Author-email: Anecdotario Team <dev@anecdotario.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/your-org/anecdotario-commons-library
Project-URL: Bug Tracker, https://github.com/your-org/anecdotario-commons-library/issues
Project-URL: Repository, https://github.com/your-org/anecdotario-commons-library
Keywords: anecdotario,microservices,utilities,models
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: boto3>=1.34.0
Requires-Dist: pynamodb>=6.0.0
Requires-Dist: Pillow>=10.0.0
Requires-Dist: python-dotenv>=1.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: moto>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Dynamic: author
Dynamic: requires-python

# Anecdotario Commons Library

Shared utilities, models, and services for Anecdotario microservices architecture.

## Overview

This library provides common functionality used across all Anecdotario services:

- **Configuration Management** - Unified config loading from environment variables and AWS Parameter Store
- **Database Models** - DynamoDB models using PynamoDB ORM
- **Photo Processing** - Image processing utilities with multi-version support
- **Validation** - Input validation and business rule enforcement
- **Authentication** - JWT and AWS Cognito utilities
- **Utilities** - Common helper functions and response formatting

## Installation

### From AWS CodeArtifact (Production)

```bash
# Configure CodeArtifact authentication
aws codeartifact login --tool pip --domain anecdotario --repository anecdotario-commons

# Install the package
pip install anecdotario-commons
```

### From Source (Development)

```bash
git clone <repository-url>
cd anecdotario-commons-library
pip install -e .
```

## Usage

### Configuration Management

```python
from anecdotario_commons.config import config

# Get configuration with fallbacks
table_name = config.get_ssm_parameter('table-name')
max_size = config.get_int_parameter('max-size', 1024)
debug = config.get_bool_parameter('debug-mode', False)
```

### Database Models

```python
from anecdotario_commons.models import Photo, UserOrg

# Create a photo record
photo = Photo(
    photo_id='unique-id',
    entity_type='user',
    entity_id='user-nickname',
    photo_type='profile'
)
photo.save()

# Query photos
photos = Photo.query('photo-id-123')
```

### Photo Processing

```python
from anecdotario_commons.processors import PhotoProcessor

processor = PhotoProcessor()
processed_images = processor.process_image(
    image_data=base64_image,
    entity_type='user',
    entity_id='nickname'
)
# Returns: {'thumbnail': url, 'standard': url, 'high_res': url}
```

### Validation

```python
from anecdotario_commons.validators import NicknameValidator

validator = NicknameValidator()
result = validator.validate('proposed-nickname', entity_type='user')

if result.valid:
    print("Nickname is available!")
else:
    print(f"Issues: {result.hints}")
```

## Development

### Setup Development Environment

```bash
# Install with development dependencies
pip install -e ".[dev]"

# Run tests
pytest

# Run tests with coverage
pytest --cov=anecdotario_commons --cov-report=html

# Format code
black anecdotario_commons tests

# Type checking
mypy anecdotario_commons
```

### Testing

```bash
# Run all tests
pytest

# Run specific test file
pytest tests/test_models.py

# Run with verbose output
pytest -v

# Run with coverage report
pytest --cov=anecdotario_commons --cov-report=term-missing
```

## Architecture

### Package Structure

```
anecdotario_commons/
├── __init__.py           # Main package exports
├── config.py            # Configuration management
├── utils.py             # Common utilities
├── constants.py         # Application constants
├── exceptions.py        # Custom exceptions
├── models/              # Database models
│   ├── __init__.py
│   ├── photo.py
│   └── user_org.py
├── processors/          # Business logic processors
│   ├── __init__.py
│   └── photo_processor.py
├── validators/          # Input validation
│   ├── __init__.py
│   └── nickname_validator.py
└── services/           # External service integrations
    ├── __init__.py
    └── service_container.py
```

### Design Principles

1. **Entity-Agnostic Design** - Functions work with any entity type (user, org, campaign)
2. **Configuration-Driven** - Behavior controlled through environment variables and Parameter Store
3. **Error Handling** - Comprehensive error handling with user-friendly messages
4. **Type Safety** - Full type hints for better development experience
5. **Testability** - Designed for easy unit testing with proper mocking

## Versioning

This library follows [Semantic Versioning](https://semver.org/):

- **MAJOR** version for incompatible API changes
- **MINOR** version for backwards-compatible functionality additions  
- **PATCH** version for backwards-compatible bug fixes

## Contributing

1. Create feature branch from `main`
2. Make changes with tests
3. Ensure all tests pass: `pytest`
4. Format code: `black .`
5. Type check: `mypy anecdotario_commons`
6. Create pull request

## License

MIT License - see LICENSE file for details.
