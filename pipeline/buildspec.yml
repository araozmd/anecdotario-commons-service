version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.12
    commands:
      - echo "Installing SAM CLI and dependencies"
      - pip install --upgrade pip
      - pip install aws-sam-cli pytest boto3 pynamodb Pillow
      
  pre_build:
    commands:
      - echo "Creating SAM artifacts bucket if it doesn't exist"
      - |
        if ! aws s3api head-bucket --bucket anecdotario-sam-artifacts-dev 2>/dev/null; then
          aws s3 mb s3://anecdotario-sam-artifacts-dev --region us-east-1
        fi
      - |
        if ! aws s3api head-bucket --bucket anecdotario-sam-artifacts-staging 2>/dev/null; then
          aws s3 mb s3://anecdotario-sam-artifacts-staging --region us-east-1
        fi
      - |
        if ! aws s3api head-bucket --bucket anecdotario-sam-artifacts-prod 2>/dev/null; then
          aws s3 mb s3://anecdotario-sam-artifacts-prod --region us-east-1
        fi
      - echo "Skipping tests temporarily to avoid package dependency circular issue"
      # - |
      #   for function_dir in photo-upload photo-delete photo-refresh nickname-validate; do
      #     if [ -d "$function_dir/tests" ]; then
      #       echo "Running tests for $function_dir"
      #       cd $function_dir
      #       if [ -f requirements.txt ]; then
      #         pip install -r requirements.txt
      #       fi
      #       pytest tests/ -v || echo "Tests failed for $function_dir"
      #       cd ..
      #     fi
      #   done

  build:
    commands:
      - echo "Building and publishing anecdotario-commons package to CodeArtifact"
      - cd anecdotario_commons
      - pip install build twine
      - python -m build
      - |
        if aws codeartifact describe-domain --domain anecdotario >/dev/null 2>&1; then
          echo "CodeArtifact domain exists, publishing package directly with AWS CLI..."
          
          # Use AWS CLI to publish directly - no login needed in CodeBuild
          for wheel in dist/*.whl; do
            echo "Publishing $(basename $wheel)..."
            HASH=$(sha256sum $wheel | cut -d' ' -f1)
            aws codeartifact publish-package-version \
              --domain anecdotario \
              --repository anecdotario-commons \
              --format pypi \
              --package anecdotario-commons \
              --package-version 1.0.0 \
              --asset-content fileb://$wheel \
              --asset-name $(basename $wheel) \
              --asset-sha256 $HASH
          done
          
          for tarball in dist/*.tar.gz; do
            echo "Publishing $(basename $tarball)..."
            HASH=$(sha256sum $tarball | cut -d' ' -f1)
            aws codeartifact publish-package-version \
              --domain anecdotario \
              --repository anecdotario-commons \
              --format pypi \
              --package anecdotario-commons \
              --package-version 1.0.0 \
              --asset-content fileb://$tarball \
              --asset-name $(basename $tarball) \
              --asset-sha256 $HASH
          done
        else
          echo "CodeArtifact domain not found, skipping package publish. This is expected on first deployment."
        fi
      - cd ..
      - |
        if aws codeartifact describe-domain --domain anecdotario >/dev/null 2>&1; then
          echo "Configuring pip to use CodeArtifact for SAM build"
          export CODEARTIFACT_REPO_URL=$(aws codeartifact get-repository-endpoint --domain anecdotario --repository anecdotario-commons --format pypi --query repositoryEndpoint --output text)
          export CODEARTIFACT_TOKEN=$(aws codeartifact get-authorization-token --domain anecdotario --duration-seconds 0 --query authorizationToken --output text)
          pip config set global.extra-index-url "${CODEARTIFACT_REPO_URL}simple/"
          pip config set global.trusted-host $(echo $CODEARTIFACT_REPO_URL | sed 's|https://||' | cut -d'/' -f1)
          echo "Building SAM application with CodeArtifact access"
          PIP_EXTRA_INDEX_URL="${CODEARTIFACT_REPO_URL}simple/" sam build --parallel --cached
        else
          echo "CodeArtifact not available, building SAM application without it (functions will fail until CodeArtifact is deployed)"
          sam build --parallel --cached
        fi
      - echo "Packaging application"
      - sam package --s3-bucket anecdotario-sam-artifacts-dev --s3-prefix commons-service --output-template-file packaged-template.yaml

artifacts:
  files:
    - packaged-template.yaml
    - samconfig-*.toml