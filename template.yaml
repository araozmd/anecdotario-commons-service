AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Anecdotario Commons Service
  
  Shared functionality service for all entities (users, orgs, campaigns).
  Includes photo upload/processing and nickname validation with consistent rules.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
  
  TableName:
    Type: String
    Default: Photos-dev
    Description: DynamoDB table name for photo metadata
  
  BucketName:
    Type: String
    Default: anecdotario-photos-dev
    Description: S3 bucket name for photo storage
  
  ParameterStorePrefix:
    Type: String
    Default: /anecdotario/dev/commons-service
    Description: Parameter Store prefix for configuration

Globals:
  Function:
    Runtime: python3.12
    Architectures: [x86_64]
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        PHOTO_TABLE_NAME: !Ref TableName
        PHOTO_BUCKET_NAME: !Ref BucketName
        PARAMETER_STORE_PREFIX: !Ref ParameterStorePrefix
    Layers:
      - !Ref CommonsServiceLayer

Resources:
  # Lambda Layer with shared dependencies
  CommonsServiceLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub anecdotario-commons-service-layer-${Environment}
      Description: Shared dependencies for commons service
      ContentUri: shared/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.12

  # DynamoDB Table for Photo Metadata
  PhotoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: photo_id
          AttributeType: S
        - AttributeName: entity_type
          AttributeType: S
        - AttributeName: entity_key
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: photo_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: entity-type-index
          KeySchema:
            - AttributeName: entity_type
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: entity-photos-index
          KeySchema:
            - AttributeName: entity_key
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Service
          Value: commons-service
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for Photo Storage
  PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - ETag
            MaxAge: 3600
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Service
          Value: commons-service
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket Policy for Public Thumbnails
  PhotoBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PhotoBucket
      PolicyDocument:
        Statement:
          - Sid: AllowPublicThumbnailAccess
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${PhotoBucket}/*/*/*/thumbnail_*.jpg"
          - Sid: DenyDirectPublicAccess
            Effect: Deny
            Principal: "*"
            Action: s3:GetObject
            Resource: 
              - !Sub "arn:aws:s3:::${PhotoBucket}/*/*/*/standard_*.jpg"
              - !Sub "arn:aws:s3:::${PhotoBucket}/*/*/*/high_res_*.jpg"

  # Photo Upload Function
  PhotoUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub anecdotario-photo-upload-${Environment}
      CodeUri: photo-upload/
      Handler: app.lambda_handler
      MemorySize: 512
      Timeout: 60
      Description: Upload and process photos for all entity types
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotoTable
        - S3CrudPolicy:
            BucketName: !Ref PhotoBucket
        - Statement:
            - Sid: SSMParameterAccess
              Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStorePrefix}/*"
      Tags:
        Service: commons-service
        Environment: !Ref Environment

  # Photo Delete Function
  PhotoDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub anecdotario-photo-delete-${Environment}
      CodeUri: photo-delete/
      Handler: app.lambda_handler
      MemorySize: 256
      Timeout: 30
      Description: Delete photos and cleanup S3 objects
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotoTable
        - S3CrudPolicy:
            BucketName: !Ref PhotoBucket
        - Statement:
            - Sid: SSMParameterAccess
              Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStorePrefix}/*"
      Tags:
        Service: commons-service
        Environment: !Ref Environment

  # Photo Refresh Function
  PhotoRefreshFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub anecdotario-photo-refresh-${Environment}
      CodeUri: photo-refresh/
      Handler: app.lambda_handler
      MemorySize: 128
      Timeout: 10
      Description: Refresh presigned URLs for protected photos
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PhotoTable
        - Statement:
            - Sid: S3PresignedURLGeneration
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::${PhotoBucket}/*"
            - Sid: SSMParameterAccess
              Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStorePrefix}/*"
      Tags:
        Service: commons-service
        Environment: !Ref Environment

  # Nickname Validation Function
  NicknameValidateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub anecdotario-nickname-validate-${Environment}
      CodeUri: nickname-validate/
      Handler: app.lambda_handler
      MemorySize: 128
      Timeout: 5
      Description: Validate nicknames for users, orgs, and other entities
      Policies:
        - Statement:
            - Sid: SSMParameterAccess
              Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStorePrefix}/*"
      Tags:
        Service: commons-service
        Environment: !Ref Environment

  # User-Organization CRUD Functions
  UserOrgCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub anecdotario-user-org-create-${Environment}
      CodeUri: user-org-create/
      Handler: app.lambda_handler
      MemorySize: 256
      Timeout: 30
      Description: Create users or organizations with unique nicknames
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub UserOrg-${Environment}
        - Statement:
            - Sid: SSMParameterAccess
              Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStorePrefix}/*"
      Tags:
        Service: commons-service
        Environment: !Ref Environment

  UserOrgGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub anecdotario-user-org-get-${Environment}
      CodeUri: user-org-get/
      Handler: app.lambda_handler
      MemorySize: 256
      Timeout: 15
      Description: Get user or organization entities with flexible querying
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub UserOrg-${Environment}
        - Statement:
            - Sid: SSMParameterAccess
              Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStorePrefix}/*"
      Tags:
        Service: commons-service
        Environment: !Ref Environment

  UserOrgUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub anecdotario-user-org-update-${Environment}
      CodeUri: user-org-update/
      Handler: app.lambda_handler
      MemorySize: 256
      Timeout: 20
      Description: Update user or organization entity data
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub UserOrg-${Environment}
        - Statement:
            - Sid: SSMParameterAccess
              Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStorePrefix}/*"
      Tags:
        Service: commons-service
        Environment: !Ref Environment

  UserOrgDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub anecdotario-user-org-delete-${Environment}
      CodeUri: user-org-delete/
      Handler: app.lambda_handler
      MemorySize: 256
      Timeout: 20
      Description: Delete user or organization entities (soft or hard delete)
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub UserOrg-${Environment}
        - Statement:
            - Sid: SSMParameterAccess
              Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStorePrefix}/*"
      Tags:
        Service: commons-service
        Environment: !Ref Environment

  # User-Organization DynamoDB Table
  UserOrgTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub UserOrg-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: nickname
          AttributeType: S
        - AttributeName: user_type
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
        - AttributeName: is_certified
          AttributeType: S
      KeySchema:
        - AttributeName: nickname
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-type-index
          KeySchema:
            - AttributeName: user_type
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: certified-index
          KeySchema:
            - AttributeName: is_certified
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Service
          Value: commons-service
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Log Groups
  PhotoUploadLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/anecdotario-photo-upload-${Environment}
      RetentionInDays: 14

  PhotoDeleteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/anecdotario-photo-delete-${Environment}
      RetentionInDays: 14

  PhotoRefreshLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/anecdotario-photo-refresh-${Environment}
      RetentionInDays: 14

  NicknameValidateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/anecdotario-nickname-validate-${Environment}
      RetentionInDays: 14

  UserOrgCreateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/anecdotario-user-org-create-${Environment}
      RetentionInDays: 14

  UserOrgGetLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/anecdotario-user-org-get-${Environment}
      RetentionInDays: 14

  UserOrgUpdateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/anecdotario-user-org-update-${Environment}
      RetentionInDays: 14

  UserOrgDeleteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/anecdotario-user-org-delete-${Environment}
      RetentionInDays: 14

Outputs:
  PhotoUploadFunctionArn:
    Description: Photo Upload Lambda Function ARN
    Value: !GetAtt PhotoUploadFunction.Arn
    Export:
      Name: !Sub anecdotario-photo-upload-arn-${Environment}

  PhotoDeleteFunctionArn:
    Description: Photo Delete Lambda Function ARN
    Value: !GetAtt PhotoDeleteFunction.Arn
    Export:
      Name: !Sub anecdotario-photo-delete-arn-${Environment}

  PhotoRefreshFunctionArn:
    Description: Photo Refresh Lambda Function ARN
    Value: !GetAtt PhotoRefreshFunction.Arn
    Export:
      Name: !Sub anecdotario-photo-refresh-arn-${Environment}

  PhotoTableName:
    Description: DynamoDB Table Name for Photos
    Value: !Ref PhotoTable
    Export:
      Name: !Sub anecdotario-photo-table-name-${Environment}

  PhotoBucketName:
    Description: S3 Bucket Name for Photos
    Value: !Ref PhotoBucket
    Export:
      Name: !Sub anecdotario-photo-bucket-name-${Environment}

  PhotoBucketArn:
    Description: S3 Bucket ARN for Photos
    Value: !GetAtt PhotoBucket.Arn
    Export:
      Name: !Sub anecdotario-photo-bucket-arn-${Environment}

  NicknameValidateFunctionArn:
    Description: Nickname Validation Lambda Function ARN
    Value: !GetAtt NicknameValidateFunction.Arn
    Export:
      Name: !Sub anecdotario-nickname-validate-arn-${Environment}

  # Lambda Layer Export
  CommonsServiceLayerArn:
    Description: Commons Service Layer ARN for shared contracts and utilities
    Value: !Ref CommonsServiceLayer
    Export:
      Name: !Sub anecdotario-commons-service-layer-arn-${Environment}


  # User-Organization CRUD Functions
  UserOrgCreateFunctionArn:
    Description: User-Organization Create Lambda Function ARN
    Value: !GetAtt UserOrgCreateFunction.Arn
    Export:
      Name: !Sub anecdotario-user-org-create-arn-${Environment}

  UserOrgGetFunctionArn:
    Description: User-Organization Get Lambda Function ARN
    Value: !GetAtt UserOrgGetFunction.Arn
    Export:
      Name: !Sub anecdotario-user-org-get-arn-${Environment}

  UserOrgUpdateFunctionArn:
    Description: User-Organization Update Lambda Function ARN
    Value: !GetAtt UserOrgUpdateFunction.Arn
    Export:
      Name: !Sub anecdotario-user-org-update-arn-${Environment}

  UserOrgDeleteFunctionArn:
    Description: User-Organization Delete Lambda Function ARN
    Value: !GetAtt UserOrgDeleteFunction.Arn
    Export:
      Name: !Sub anecdotario-user-org-delete-arn-${Environment}

  # User-Organization Table
  UserOrgTableName:
    Description: DynamoDB Table Name for User-Organization entities
    Value: !Ref UserOrgTable
    Export:
      Name: !Sub anecdotario-user-org-table-name-${Environment}